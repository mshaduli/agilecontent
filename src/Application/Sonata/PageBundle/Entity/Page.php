<?php
/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\PageBundle\Entity;

use Sonata\PageBundle\Entity\BasePage as BasePage;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class Page extends BasePage
{

    /**
     * @var integer $id
     */
    protected $id;
    
    /**
     *
     * @var type ArrayCollection
     */
    protected $tags;
    
    /**
     *
     * @var type bodyCopy
     */
    protected $bodyCopy;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }
    
    public function getTags()
    {
        return $this->tags;
    }
    
    
    public function setTags($tags)
    {
        $this->tags = $tags;
    }
    
    public function getBodyCopy()
    {
        return $this->bodyCopy;
    }    
    
    public function setBodyCopy($bodyCopy)
    {
        $this->bodyCopy = $bodyCopy;
    }
    
    public function getTaggedMedia()
    {   
        $content = array();
        
        foreach($this->getTags() as $tag)
        {
            $content[] = $this->createTags($tag);
        }
        
        return $content;
    }
    
    
    public function createTags($tag)
    {
        $content = array();
        $content['id']     = $tag->getId();
        $content['name']  = $tag->getName();
        
        if(count($tag->getMedia()) > 0)
        {
            foreach($tag->getMedia() as $media)
            {
                $content['media'][] = $this->createMediaTags($media);
            }
        }else
        {
            $content['media'] = array();
        }
            
        return $content;
    }
    
    public function createMediaTags($media)
    {
        $mediaContent = array();
        $mediaContent['id'] = $media->getId();
        $mediaContent['name'] = $media->getName();
        $mediaContent['description'] = $media->getDescription();
        $mediaContent['enabled'] = $media->getEnabled();
        $mediaContent['provider_name'] = $media->getProviderName();
        $mediaContent['provider_status'] = $media->getProviderStatus();
        $mediaContent['provider_reference'] = $media->getProviderReference();
        $mediaContent['provider_metadata'] = $media->getProviderMetadata();
        $mediaContent['width'] = $media->getWidth();
        $mediaContent['height'] = $media->getHeight();
        $mediaContent['length'] = $media->getLength();
        $mediaContent['content_type'] = $media->getContentType();
        $mediaContent['tagIds'] = $media->getTagIds();
        $mediaContent['copyright'] = $media->getCopyright();
        $mediaContent['author_name'] = $media->getAuthorName();
        $mediaContent['context'] = $media->getContext();
        $mediaContent['cdn_is_flushable'] = $media->getCdnIsFlushable();
        $mediaContent['cdn_status'] = $media->getCdnStatus();
        $mediaContent['cdn_flush_at'] = $media->getCdnFlushAt();
        $mediaContent['updated_at'] = $media->getUpdatedAt();
        $mediaContent['created_at'] = $media->getCreatedAt();
        
        return $mediaContent;
    }
      
}